{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1BsNIAB1dJIoh9IGQ8aCaUyZAW0g5B5m-",
      "authorship_tag": "ABX9TyMHa7E52Aam+VnVbjnDwYY/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/TheExamineer/Make_first_pull-request/blob/master/Titanic_Navi-Bayes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "MIGXdvDYgrz3"
      },
      "outputs": [],
      "source": [
        "# naive bayes \n",
        "#testfile \n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import operator \n",
        "\n",
        "class MultinomialNaiveBayes(): #\n",
        "\n",
        "    def __init__(self, X, targets):\n",
        "        \"\"\"Mulinomial Naive Bayes classification on the inputted data.\n",
        "        \n",
        "        X = a numpy array of numerical values. The dimensions are (m x n), where\n",
        "            each row is a training example and each column is a feature. \n",
        "\n",
        "        targets = a numpy array of numerical values. The associated targets with\n",
        "                    each training example in X, with size (m x 1). \n",
        "        \"\"\"\n",
        "\n",
        "        # split into training examples for each class\n",
        "        self.classes = np.unique(targets).tolist()\n",
        "        self.amountOfClasses = len(self.classes)\n",
        "\n",
        "        self.n = np.shape(X)[1]\n",
        "        self.m = np.shape(X)[0]\n",
        "\n",
        "        # set small number epsilon to get rid of any zeros\n",
        "        self.epsilon = 0.001\n",
        "\n",
        "        # merge X and targets for ease of indexing\n",
        "        A = np.concatenate([X, targets], axis=1)\n",
        "\n",
        "        # turn into a pandas df\n",
        "        df = pd.DataFrame(A)\n",
        "\n",
        "        #make list of split datasets based on class\n",
        "        self.splitdata = {}\n",
        "\n",
        "        for c in self.classes:\n",
        "            x = df.loc[df[self.n] == c]\n",
        "            self.splitdata[c] = x\n",
        "\n",
        "        self.allLikelihoods = {}\n",
        "        self.allPriors = {}\n",
        "        for c in self.classes:\n",
        "            # for each class, calculate the corresponding probabilities\n",
        "            X = self.splitdata[c]\n",
        "            M = np.shape(X)[0]\n",
        "            \n",
        "            # calculate the class prior probability (out of all examps, what prob is the class?)\n",
        "            self.allPriors[c] = M/self.m \n",
        "    \n",
        "            # calculate total amount of counts for each variable in the class\n",
        "            total = X.loc[:, X.columns[:-1]].to_numpy().sum()\n",
        "\n",
        "            # calculate all likelihood terms P(N|c) using multinomial distribution\n",
        "            likelihoods = {}\n",
        "\n",
        "            for feature in range(self.n):\n",
        "                featureOccurrences = X.loc[:, X.columns[feature]].to_numpy().sum()\n",
        "                \n",
        "                # return +1 for stability on top and bottom\n",
        "                likelihood = (featureOccurrences + 1) / (total + self.n)\n",
        "                likelihoods[feature] = (likelihood)\n",
        "            \n",
        "            self.allLikelihoods[c] = likelihoods\n",
        "        \n",
        "    \n",
        "    def fit(self, x):\n",
        "        \"\"\"fits the model to a new example.\n",
        "\n",
        "           x: a matrix where each column is a feature, and each row is a training example. If \n",
        "              multiple training examples, answer returned will be a numpy array of predictions in \n",
        "              size ([examples, 1]). IMPORTANT: INPUT MUST NOT BE A RANK ONE ARRAY. IF SUBMITTING\n",
        "              A SINGLE EXAMPLE, MUST BE IN FORMAT np.array([[1, 2, 3, 4]]).\n",
        "\n",
        "        \"\"\"\n",
        "    \n",
        "\n",
        "        # run through each calculated conditional probability and multiply it by how much it appears in \n",
        "        # new example\n",
        "        \n",
        "        # if single example, reshape into 2d array so we can iterate properly\n",
        "        \n",
        "        exampleResults = [] \n",
        "\n",
        "        logits = {} \n",
        "        for ex in x:\n",
        "            for c in self.classes:\n",
        "                runningCondProbs = []\n",
        "                for feature in range(self.n):\n",
        "                    currentConditionalProb = round(ex[feature]*self.allLikelihoods[c][feature], 4)\n",
        "                    currentConditionalProb += self.epsilon\n",
        "                    runningCondProbs.append(currentConditionalProb)\n",
        "            \n",
        "                unnormalizedClassProb = (np.prod(runningCondProbs))*self.allPriors[c]\n",
        "                    \n",
        "                logits[c] = unnormalizedClassProb\n",
        "            \n",
        "            assignedClass = max(logits.items(), key=operator.itemgetter(1))[0]\n",
        "            exampleResults.append(assignedClass)\n",
        "          \n",
        "        \n",
        "        # return the exampleResults as a (examples, 1) size matrix\n",
        "        return ((np.array(exampleResults).reshape((np.shape(x)[0], -1))))\n",
        "        \n",
        "            \n",
        "\n",
        "    \n",
        "  # achieves 77.27% on Kaggle Titanic Dataset (only using columns: 'age', 'sex'(dummy), and 'fare')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# LOAD TRAINING DATA =================================================================================\n",
        "\n",
        "df = pd.read_csv('train.csv')\n",
        "\n",
        "# drop unnecessary columns \n",
        "df = df.drop(['Name', 'PassengerId', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'], axis=1)\n",
        "\n",
        "# turn male female into dummies and drop old male/female column \n",
        "dummies = pd.get_dummies(df['Sex'])\n",
        "df = df.drop(['Sex'], axis=1)\n",
        "\n",
        "# add dummies \n",
        "df= pd.concat([df, dummies], axis=1)\n",
        "\n",
        "# turn survived column into separate y, then delete\n",
        "y = df['Survived']\n",
        "df = df.drop(['Survived'], axis=1)\n",
        "\n",
        "# fill any NaN values with the mean of the column\n",
        "df = df.fillna(df.mean())\n",
        "\n",
        "# convert both to numpy arrays to pass to MultnomialNaiveBayes\n",
        "A = df.to_numpy()\n",
        "y = y.to_numpy().reshape((-1, 1))\n",
        "\n",
        "\n",
        "# LOAD TEST DATA =======================================================================================\n",
        "df2 = pd.read_csv('test.csv')\n",
        "passengerNos = df2['PassengerId']\n",
        "\n",
        "# drop unnecessary columns \n",
        "df2 = df2.drop(['Name', 'PassengerId', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'], axis=1)\n",
        "\n",
        "# turn male female into dummies and drop old male/female column \n",
        "dummies = pd.get_dummies(df2['Sex'])\n",
        "df2 = df2.drop(['Sex'], axis=1)\n",
        "\n",
        "# add dummies \n",
        "df2 = pd.concat([df2, dummies], axis=1)\n",
        "X = df2.to_numpy()\n",
        "\n",
        "# IMPLEMENT NAIVE BAYES ================================================================================\n",
        "\n",
        "# pass training data into MultinomialNaiveBayes\n",
        "MNB = MultinomialNaiveBayes(A, y)\n",
        "\n",
        "# fit new examples (test set)\n",
        "yhat = MNB.fit(X)\n",
        "\n",
        "# create submission csv file\n",
        "submissionDf = np.concatenate([passengerNos.to_numpy().reshape((-1, 1)), yhat], axis=1)\n",
        "submission = pd.DataFrame(data=submissionDf, columns=[\"PassengerId\", \"Survived\"])\n",
        "submission.to_csv('TitanicSubmission1.csv', index=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Downloading CSV file of resulting data"
      ],
      "metadata": {
        "id": "s_n9mJJhr1ji"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download('TitanicSubmission1.csv')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "9SGEtAtWrR62",
        "outputId": "1e12a38e-7c35-44ad-8578-c203efacb826"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_d49cc344-531d-4e95-b43f-322b82ebb6a2\", \"TitanicSubmission1.csv\", 2839)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}